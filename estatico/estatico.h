/*
	Autores:
	Alex Galhardo
	Numero USP: 10408344

	Ian Castilho Caldeira Brant
	Numero USP: 10133967

	ICMC USP - S√£o Carlos 2017
*/

#ifndef ESTATICO_H_INCLUDED
#define ESTATICO_H_INCLUDED

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

#define MAX 100
#define tamLivros 100
#define tamAlunos 100
#define tamEspera 1000
#define tamEmprestados 100
#define tamEmprestimo 100
#define tamEmail 100
#define MSG 200

/* struct dos livros */
typedef struct{  
	char titulo[MAX];  // TITULO DO LIVRO
	char autor[MAX]; // AUTOR DO LIVRO
	int ISBN; // NUMERO DE IDENTIFICACAO DO LIVRO
	char editora[MAX]; // EDITORA DO LIVRO
	int ano; // ANO DE PUBLICACAO DO LIVRO
	int edicao; // EDICAO DO LIVRO
	int copias; // NUMERO DE COPIAS DO LIVRO
	int pos; // POSICAO DO LIVRO NA LISTA DE LIVROS DA BIBLIOTECA
	int iniesp; // POSICAO DO PRIMEIRO ALUNO NA FILA DE ESPERA DO LIVRO
	int fimesp; // POSICAO DO ULTIMO ALUNO NA FILA DE ESPERA DO LIVRO
	int iniemp; // POSICAO DO PRIMEIRO ALUNO PARA O QUAL O LIVRO ESTA EMPRSETADO
	int fimemp; // POSICAO DO ULTIMO ALUNO PARA O QUAL O LIVRO ESTA EMPRSETADO
	int emprestados; // QUANTIDADE DE COPIAS EMPRESTADAS
	int espera; // QUANTIDADE DE ALUNOS NA FILA DE ESPERA DO LIVRO
}LIVRO;

typedef struct { // NO DA LISTA DE LIVROS DA BIBLIOTECA
	LIVRO info; // LIVRO QUE ESTA NO NO
	int prox; // INDICE DO PROXIMO NO DA LISTA
}NO_LIVROS;

typedef struct{ // LISTA DE LIVROS DA BILITOECA (BANCO DE MEMORIA)
	NO_LIVROS info[tamLivros]; // QUANTIDADE DE NOS NA LISTA
	int ini,fim,pv; // INI: INICO DA LISTA; FIM:FIM DA LISTA; PV: PRIMEIRO VAZIO DA LISTA
}LISTA_LIVROS;


/* STRUCTS DOS ALUNOS */
typedef struct{ // STRUCT PARA GUARDAR INFORMACOES DOS ALUNOS
	char nome[MAX]; // NOME DO ALUNO
	int numUSP; // NUMERO USP DO ALUNO
	char telefone[11]; // TELEFONE DO ALUNO
	char email[MAX]; // EMAIL DO ALUNO
	int emprestados; // QUANTIDADE DE LIVROS EMPRSETADOS PARA ESSE ALUNO
	int pos; // POSICAO DO ALUNO NA LISTA DE ALUNOS
	int ini; // POSICAO DO PRIMEIRO LIVRO EMPRSETADO PARA ESSE ALUNO
	int fim; // POSICAO DO ULTIMO LIVRO EMPRSETADO PARA ESSE ALUNO
}ALUNO;

typedef struct { // NO DA LISTA DE ALUNOS
	ALUNO info; // ALUNO QUE ESTA NO NO
	int prox; // INDICE DO PROXIMO NO DA LISTA
}NO_ALUNOS;

typedef struct { // LISTA DE ALUNOS (BANCO DE MEMORIA)
	NO_ALUNOS info[tamAlunos]; // QUANTIDADE DE NOS NA LISTA
	int ini,fim,pv; // INI: INICO DA LISTA; FIM:FIM DA LISTA; PV: PRIMEIRO VAZIO DA LISTA
}LISTA_ALUNOS;

typedef struct { // LISTA DE ESPERA PARA PEGAR LIVROS (BANCO DE MEMORIA)
	NO_ALUNOS info[tamEspera]; // NOS (ALUNOS) NA FILA DE ESPERA
	int pv; // PRIMEIRO VAZIO DA FILA DE ESPERA
}LISTA_ESPERA;

typedef struct { // LISTA DE ALUNOS PARA OS QUAIS OS LIVROS ESTAO EMPRSETADOS (BANCO DE MEMORIA)
	NO_ALUNOS info[tamEmprestados]; // NOS (ALUNOS) NA LISTA DE ALUNOS PARA OS QUAIS EMPRSETADOS
	int pv; // PRIMEIRO VAZIO DA LISTA DE ALUNOS PARA OS QUAIS LIVROS ESTAO
}LISTA_EMPRESTADOS;

typedef struct { // LISTA DE LIVROS QUE UM ALUNO PEGOU EMPRSETADO
	NO_LIVROS info[tamEmprestimo]; // NOS (LIVROS) DA LISTA DE LIVROS QUE UM ALUNO PEGOU EMPRESTADO
	int pv; //PRIMEIRO VAZIO DA LISTA DE EMPRSETIMOS
}LISTA_EMPRESTIMOS;

typedef struct { // STRUCT COM INFORMA«’ES QUE SER√O ARMAZENADAS NOS EMAILS ENVIADOS AO BIBLIOTECARIO
	int numUSP; // NUMERO USP DO ALUNO AO QUAL O EMAIL SE REFERE
	char nome[MAX]; // NOME DO ALUNO AO QUAL O EMAIL SE REFERE
	int ISBN; // ISBN DO LIVRO AO QUAL O EMAIL SE REFERE
	char titulo[MAX]; // TITULO DO LIVRO AO QUAL O EMAIL SE REFERE
	char mensagem[MSG]; // MENSAGEM QUE SERA IMPRESSA NO EMAIL
	int prox; // POSICAO DO PROXIMO EMAIL DA PILHA
}DADOS;

typedef struct{ // PILHA DE ARMAZENAMENTO DOS EMAILS ENVIADOS
	DADOS info[tamEmail]; // VETOR COM AS STRUCTS DADOS QUE ARMZENAM AS INFORMA«’ES DO EMAIL
	int topo; // TOPO DA PILHA DE EMAILS
	int pv; // PRIMEIRA POSICAO VAZIA NO VETOR ONDE … ARMAZENADA A PILHA
}PILHA_EMAIL;

/* STRUCT PRINCIPAL DO PROGRAMA */
typedef struct{ // STRUCT QUE ARMAZENA TODAS AS ESTRUTURAS NECESSARIAS PARA O FUNCIONAMENTO DA BIBLIOTECA
	LISTA_LIVROS livros; // LISTA ONDE OS LIVROS SAO ARMAZENADOS NA BIBLIOTECA
	LISTA_ALUNOS alunos; // LISTA ONDE OS ALUNOS SAO ARMAZENADOS NA BIBLIOTECA
	LISTA_ESPERA espera; // LISTA DE FILAS DE ESPERA DA BIBLIOTECA
	LISTA_EMPRESTADOS emprestados; // LISTA DE LISTAS DE ALUNOS PARA OS QUAIS UM LIVRO ESTA EMPRESTADO
	LISTA_EMPRESTIMOS emprestimos; // LISTA DE LISTAS DE LIVROS QUE UM ALUNO TEM EMPRESTADO
	PILHA_EMAIL pilha;
}BIBLIOTECA;

/* fun√ß√µes principais da biblioteca */
void criaBiblioteca(BIBLIOTECA *b); // FUNCAO PARA CRIAR UMA BIBLIOTECA
void retirarLivro(BIBLIOTECA *b); // FUNCAO PARA PEGAR UM LIVRO EMPRESTADO NA BIBLIOTECA
void devolverLivro(BIBLIOTECA *b); // FUNCAO PARA DEVOLVER UM LIVRO PARA A BIBLIOTECA


/* fun√ß√µes menu da biblioteca */
void mostrarMenu(); // FUNCAO QUE MOSTRA AS OPCOES AO USUARIO
void menu(int op, BIBLIOTECA *b, int *erro); // FUNCAO QUE REALIZA A OPERACAO INSERIDA PELO USUARIO


/* fun√ß√µes principais da lista de livros */
void cadastrarLivro(BIBLIOTECA *b); // FUNCAO PARA CADASTRAR UM LIVRO NA BIBLIOTECA
void descadastrarLivro (BIBLIOTECA *b); // FUNCAO PARA DESCADASTRAR UM LIVRFO DA BIBLIOTECA
void insereLivro(BIBLIOTECA *b, LIVRO livro, int *erro); // FUNCAO DE INSERCAO DO LIVRO CADASTRADO NA LISTA DE LIVROS
void removeLivro(BIBLIOTECA *b, LIVRO livro, int *erro); // FUNCAO DE REMOCAO DO LIVRO CADASTRADO DA LISTA DE LIVROS
void mostrarDadosLivro(LIVRO livro); // FUNCAO PARA MOSTRAR OS DADOS DE UM LIVRO
void verificaISBN(BIBLIOTECA *b, LIVRO *livro, int *ver); // FUNCAO QUE VERIFICA SE UM ISBN TEM 4 DIGITOS E SE JA SE ENCONTRA CADASTRADO
void verificaTitulo(BIBLIOTECA *b, LIVRO livro, int *ver); // FUNCAO QUE VERIFICA SE UM TITULO JA SE ENCONTRA CADASTRADO



/* fun√ß√µes principais da lista de alunos */
void cadastrarAluno(BIBLIOTECA *b); // FUNCAO PARA CADASTRAR UM ALUNO NA BIBLIOTECA
void descadastrarAluno (BIBLIOTECA *b); // FUNCAO PARA DESCADASTRAR UM ALUNO DA BIBLIOTECA

void insereAluno(BIBLIOTECA *b,  ALUNO aluno, int *erro); // FUNCAO PARA INSERCAO DE UM ALUNO NA LISTA DE ALUNOS
void removeAluno(BIBLIOTECA *b, ALUNO aluno, int *erro); // FUNCAO PARA REMOCAO DE UM ALUNO DA LISTA DE ALUNOS

void mostrarDadosAluno(ALUNO aluno); //FUNCAO PARA MOSTRAR DADOS DE UM ALUNO

void verificaNumUSP(BIBLIOTECA *b, ALUNO *aluno, int *ver); // FUNCAO QUE VERIFICA SE UM NUMERO USP TEM 8 DIGITOS E SE JA SE ENCONTRA CADASTRADO
void verificaNome(BIBLIOTECA *b, ALUNO aluno, int *ver); // FUNCAO QUE VERIFICA SE UM NOME JA SE ENCONRA CADASTRADO
void verificaEmail(BIBLIOTECA *b, ALUNO aluno, int *ver); // FUNCAO QUE VERIFICA SE O EMAIL E TERMINADO EM @USP.BR E SE O MESMO JA SE ENCONTRA CADASTRADO
void verificaTelefone(BIBLIOTECA *B, ALUNO ALUNO, int *ver); // FUNCAO QUE VERIFICA SE UM TELEFONE JA SE ENCONTRA CADASTRADO



/* func√µes principais da lista de espera */
void insereEspera (BIBLIOTECA *b, LIVRO *li, ALUNO *aluno, int *erro); // FUNCAO QUE INSERE UM ALUNO NA FILA DE ESPERA DE UM LIVRO
int EstaNaEspera(BIBLIOTECA *b,LIVRO *livro, ALUNO aluno);  // FUNCAO QUE VERIFICA SE UM ALUNO ESTA NA FILA DE ESPERA DE UM LIVRO
void RemoveEspera (BIBLIOTECA *b, LIVRO *li, ALUNO aluno, int *erro);  // FUNCAO QUE REMOVE UM ALUNO DA FILA DE ESPERA DE UM LIVRO


/* fun√ß√µes principais da lista de emprestados */
void InsereEmprestados(BIBLIOTECA *b, LIVRO *livro, ALUNO *aluno, int *erro);  // FUNCAO QUE INSRE UM ALUNO NA LISTA DE PESSOAS PARA OS QUAIS UM LIVRO ESTA EMPRESTADO
void RemoveEmprestado (BIBLIOTECA *b, LIVRO *livro, ALUNO aluno, int *erro);  // FUNCAO QUE REMOV UM ALUNO DA LISTA DE PESSOAS PARA AS QUAIS UM LIVRO ESTA EMPRESTADO
int EstaEmprestado(BIBLIOTECA *b, LIVRO *livro, ALUNO aluno); // FUNCAO QUE VERIFICA SE UM ALUNO TEM UM LIVRO EMPRESTADO 

/* fun√ß√£o principal da lista de emprestimos */
void InsereEmprestimos(BIBLIOTECA *b, LIVRO *livro, ALUNO *aluno, int *erro); // FUNCAO QUE INSERE UM LIVRO NA LISTA DE LIVROS QUE UM ALUNO TEM EMPRESTADOS

void mostrarDadosEmail(DADOS dados); // MOSTRA AS INFORMACOES DE UM EAIL
#endif
